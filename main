// 設定値
var SHEET_RPAY_ID = '1ozJCUSX7CSikxtKgiTKwOBe2FpTyFyCdoeaTowMsbMo';
var SHEET_NAME = 'Rpay';
var numRowsFromBottom = 100;  // 下から何行取得するか
var MAILID_ROW = 7;           // 何列目にメールIDが記載されているか（1始まり）

// =======================================
// 正規表現定義（外部化された抽出ルール）
// =======================================
const FIELD_DEFINITIONS = [
  {
    label: 'shop',
    regex: /ご利用店舗\s+(.+)/,
  },
  {
    label: 'amount',
    regex: /決済総額\s+(\d{1,3}(?:,\d{3})*)/,
    process: val => val.replace(/[¥￥,]/g, '').trim(),
  },
  {
    label: 'date',
    regex: /ご利用日時\s+(\d{4}\/\d{2}\/\d{2}\(.\)\s+\d{2}:\d{2})/,
  },
  {
    label: 'name',
    regex: /鎌田\s+(.+)様/,
  }
];

// =======================================
// メイン関数
// =======================================
function main() {
  const labelQuery = 'label:RPAY label:処理OK';
  const threads = searchContactMail(labelQuery);

  if (threads.length === 0) {
    console.log("メールが来ていません");
    return;
  }

  // G列の既存メールIDを指定件数下から取得
  const existingIds = getLastNRows(SHEET_RPAY_ID, SHEET_NAME, numRowsFromBottom)
                       .map(row => row[MAILID_ROW - 1]);  // インデックス調整

  // 既存IDと重複しない新規メールを抽出
  const newMails = getThreadsData(threads, existingIds);

  if (newMails.length === 0) {
    console.log("記入されています");
    return;
  }

  // 各メールについて情報抽出・スプレッドシートに追加
  const newRows = [];
  newMails.forEach(mail => {
    const [rpayid, , sendDate, body, permalink, subject, id] = mail;

    const inputdate = new Date();
    const fields = extractFields(body);

  newRows.push([
    rpayid,
    inputdate,
    fields.date,
    fields.shop,
    fields.name,
    fields.amount,
    permalink,
    id
  ]);
});

if (newRows.length > 0) {
  appendRowsToSheet(SHEET_RPAY_ID, SHEET_NAME, newRows);
    console.log(`${newMails.length} 件の新しいメールを書き込みました。`);
}
}

//--------------------------------------メインここまで-------------------------------------------------------


// =======================================
// メールスレッド検索
// =======================================
function searchContactMail(SEARCH_WORD) {
  const query = SEARCH_WORD;
  const start = 0;
  const max = 10;
  return GmailApp.search(query, start, max);
}

// =======================================
// メール本文とメタ情報を抽出（新規のみ）
// =======================================
function getThreadsData(threads, existingIds) {
  const values = [];

  threads.forEach(thread => {
    thread.getMessages().forEach(message => {
      const id = message.getId();
      if (existingIds.includes(id)) return;

      const uniqueid = padStartWith0(Math.random().toString(16).slice(7), 8);
      const inputdate = new Date();
      const sendDate = message.getDate();
      const body = message.getPlainBody();
      const permalink = message.getThread().getPermalink();
      const subject = message.getSubject();

      values.push([uniqueid, inputdate, sendDate, body, permalink, subject, id]);
    });
  });

  return values;
}

// =======================================
// スプレッドシートから下からN行取得
// =======================================
function getLastNRows(spreadsheetId, sheetName, numRowsFromBottom) {
  const ss = SpreadsheetApp.openById(spreadsheetId);
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) throw new Error(`シート "${sheetName}" が見つかりません`);

  const lastRow = sheet.getLastRow();
  const lastCol = sheet.getLastColumn();
  const startRow = Math.max(lastRow - numRowsFromBottom + 1, 1);
  const numRows = lastRow - startRow + 1;

  return sheet.getRange(startRow, 1, numRows, lastCol).getValues();
}

// =======================================
// 複数行を一括でスプレッドシートに追加する関数
// =======================================
function appendRowsToSheet(spreadsheetId, sheetName, rows) {
  const ss = SpreadsheetApp.openById(spreadsheetId);
  const sheet = ss.getSheetByName(sheetName);

  const startRow = sheet.getLastRow() + 1;
  const numRows = rows.length;
  const numCols = rows[0].length;

  sheet.getRange(startRow, 1, numRows, numCols).setValues(rows);
}

// =======================================
// 正規表現パターンに基づいて本文からフィールド抽出
// =======================================
function extractFields(body) {
  const result = {};
  FIELD_DEFINITIONS.forEach(field => {
    const match = body.match(field.regex);
    let value = match ? match[1].trim() : '不明';
    if (field.process) {
      value = field.process(value);
    }
    result[field.label] = value;
  });
  return result;
}

// =======================================
// 0埋めユーティリティ
// =======================================
function padStartWith0(number, length) {
  return number.toString().padStart(length, '0');
}
