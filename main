/**
 * 指定されたラベルのメールスレッドを検索し、必要なデータを抽出してGoogle Sheetsに書き込む関数
 * 処理完了のラベルをメールスレッドに追加
 */
function rpayToSheet() {
  // メールスレッドを検索
   // houseBook ライブラリを使用して、指定したラベルのメールスレッドを取得
  var mailThreads = searchContactMail("label:RPAY -label:処理OK");

    // メールスレッドからデータを取得
  // houseBook ライブラリの関数を使用
  var resultMailList = getThreadsData(mailThreads);

  
  //書き込むシートを取得
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Rpay");
  var lastRow = sheet.getLastRow();
  var numRowsToFetch = 10;  //下から何行分とるか

  var sheetData = sheet.getRange(lastRow-numRowsToFetch, 1, numRowsToFetch+1, sheet.getLastColumn()).getValues();




  //新着のRpay利用メールがなければ終了
  if (resultMailList.length === 0) {
    Logger.log("新着メールはありません");
    return 0;
  }

  //新着のRpay利用メールがある場合
  else {

    //resultMailListにヘッダーを追加
    resultMailList.unshift(["to", "sendDate", "messageBody", "parma", "subjectTitle","mailId"]);


    //配列をオブジェクトに変更
    // houseBook ライブラリの関数を使用
    //@param {Array} resultMailList
    const resultMailListObj = arraysToObjects(resultMailList)

    //メール本文から必要な情報を抽出する正規表現のパターン
    const patterns = {
      userName: /鎌田\s+(.+)様/,
      usageDate: /ご利用日時\s+(\d{4}\/\d{2}\/\d{2}\(.\)\s+\d{2}:\d{2})/,
      storeName: /ご利用店舗\s+(.+)/,
      amount: /決済総額\s+(\d{1,3}(,\d{3})*)/
    };

    /**
     * メールオブジェクトから必要なデータを抽出する関数。
     * @param {Object} mail - メールのデータオブジェクト。
     * @returns {Object} - 抽出されたデータを含むオブジェクト。
     */
    function extractData(mail) {
      const messageBody = mail.messageBody;
      return {
        rpayId: houseBook.createID(),  // houseBook ライブラリを使用して一意のIDを作成
        inputDate: new Date(),  // 現在の日付を取得
        usageDate: messageBody.match(patterns.usageDate)?.[1] || '',  // 利用日時を抽出
        storeName: messageBody.match(patterns.storeName)?.[1] || '',  // 店名を抽出
        userName: messageBody.match(patterns.userName)?.[1] || '',  // 使用者を抽出
        amount: messageBody.match(patterns.amount)?.[1] || '',  // 金額を抽出
        permanentLink: mail.parma || '',  //パーマネントリンクを抽出
        mailId: mail.mailId || ''  //メールID;

      };
    }
    


    // resultMailListObjから配列に変換
    // houseBook ライブラリの関数を使用
    const resultRpay = houseBook.objectsToArrays(resultMailListObj.map(mail => extractData(mail)));






    //resultRpayにはヘッダーがあるから取り除く
    resultRpay.shift();

    sheet.getRange(sheet.getLastRow() + 1, 1, resultRpay.length, resultRpay[0].length).setValues(resultRpay);

  //処理済みのラベルを付ける
  GmailApp.createLabel('処理OK').addToThreads(mailThreads);


  }

}


